#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'fireworks_types'

module AgentVsAgent
  module Fireworks
    class Client
      include ::Thrift::Client

      def enter_arena(request)
        send_enter_arena(request)
        return recv_enter_arena()
      end

      def send_enter_arena(request)
        send_message('enter_arena', Enter_arena_args, :request => request)
      end

      def recv_enter_arena()
        result = receive_message(Enter_arena_result)
        return result.success unless result.success.nil?
        raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'enter_arena failed: unknown result')
      end

      def get_game_info(ticket)
        send_get_game_info(ticket)
        return recv_get_game_info()
      end

      def send_get_game_info(ticket)
        send_message('get_game_info', Get_game_info_args, :ticket => ticket)
      end

      def recv_get_game_info()
        result = receive_message(Get_game_info_result)
        return result.success unless result.success.nil?
        raise result.ex unless result.ex.nil?
        raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_game_info failed: unknown result')
      end

      def get_game_result(ticket)
        send_get_game_result(ticket)
        return recv_get_game_result()
      end

      def send_get_game_result(ticket)
        send_message('get_game_result', Get_game_result_args, :ticket => ticket)
      end

      def recv_get_game_result()
        result = receive_message(Get_game_result_result)
        return result.success unless result.success.nil?
        raise result.ex unless result.ex.nil?
        raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_game_result failed: unknown result')
      end

    end

    class Processor
      include ::Thrift::Processor

      def process_enter_arena(seqid, iprot, oprot)
        args = read_args(iprot, Enter_arena_args)
        result = Enter_arena_result.new()
        result.success = @handler.enter_arena(args.request)
        write_result(result, oprot, 'enter_arena', seqid)
      end

      def process_get_game_info(seqid, iprot, oprot)
        args = read_args(iprot, Get_game_info_args)
        result = Get_game_info_result.new()
        begin
          result.success = @handler.get_game_info(args.ticket)
        rescue ::AgentVsAgent::GameException => ex
          result.ex = ex
        end
        write_result(result, oprot, 'get_game_info', seqid)
      end

      def process_get_game_result(seqid, iprot, oprot)
        args = read_args(iprot, Get_game_result_args)
        result = Get_game_result_result.new()
        begin
          result.success = @handler.get_game_result(args.ticket)
        rescue ::AgentVsAgent::GameException => ex
          result.ex = ex
        end
        write_result(result, oprot, 'get_game_result', seqid)
      end

    end

    # HELPER FUNCTIONS AND STRUCTURES

    class Enter_arena_args
      include ::Thrift::Struct, ::Thrift::Struct_Union
      REQUEST = 1

      FIELDS = {
        REQUEST => {:type => ::Thrift::Types::STRUCT, :name => 'request', :class => ::AgentVsAgent::EntryRequest}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field request is unset!') unless @request
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Enter_arena_result
      include ::Thrift::Struct, ::Thrift::Struct_Union
      SUCCESS = 0

      FIELDS = {
        SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::AgentVsAgent::EntryResponse}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Get_game_info_args
      include ::Thrift::Struct, ::Thrift::Struct_Union
      TICKET = 1

      FIELDS = {
        TICKET => {:type => ::Thrift::Types::STRUCT, :name => 'ticket', :class => ::AgentVsAgent::Ticket}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field ticket is unset!') unless @ticket
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Get_game_info_result
      include ::Thrift::Struct, ::Thrift::Struct_Union
      SUCCESS = 0
      EX = 1

      FIELDS = {
        SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::AgentVsAgent::GameInfo},
        EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::AgentVsAgent::GameException}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Get_game_result_args
      include ::Thrift::Struct, ::Thrift::Struct_Union
      TICKET = 1

      FIELDS = {
        TICKET => {:type => ::Thrift::Types::STRUCT, :name => 'ticket', :class => ::AgentVsAgent::Ticket}
      }

      def struct_fields; FIELDS; end

      def validate
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Required field ticket is unset!') unless @ticket
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Get_game_result_result
      include ::Thrift::Struct, ::Thrift::Struct_Union
      SUCCESS = 0
      EX = 1

      FIELDS = {
        SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::AgentVsAgent::GameResult},
        EX => {:type => ::Thrift::Types::STRUCT, :name => 'ex', :class => ::AgentVsAgent::GameException}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

  end

end
